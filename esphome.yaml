globals:
  - id: play_requested
    type: bool
    restore_value: true
    initial_value: 'false'
  - id: volume_setting
    type: float
    restore_value: true
    initial_value: '0.3'
  - id: stream_url
    type: std::string
    restore_value: false
    initial_value: '"http://live-aacplus-64.kexp.org/kexp64.aac"'

esphome:
  name: dementia-radio-muse-luxe
  friendly_name: Dementia Radio Muse Luxe
  name_add_mac_suffix: true
  project:
    name: raspiaudio.muse-luxe
    version: "1.0"
  min_version: 2023.5.0
  on_boot:
    - priority: 600
      then:
        - light.turn_off:
            id: top_led
        - media_player.volume_set: 0%
        - output.turn_on: mute_amp
        - light.turn_on: &connecting_blue
            id: top_led
            blue: 100%
            red: 0%
            green: 0%
            effect: Pulse
    - priority: 200
      then:
        - light.turn_on: &kexp_yellow
            id: top_led
            blue: 0%
            red: 70%
            green: 50%
            effect: none

script:
  - id: start_playing
    mode: restart
    then:
      - light.turn_on: &play_green
          id: top_led
          blue: 25%
          red: 0%
          green: 75%
          effect: none
      - media_player.volume_set: 0%
      - media_player.play_media:
          id: luxe_out
          media_url: !lambda return id(stream_url);
      - wait_until:
          condition:
            media_player.is_playing
          timeout: 15s 
      - media_player.volume_set: !lambda return id(volume_setting);
  - id: stop_playing
    mode: single
    then:
      - media_player.stop:
          id: luxe_out
      - light.turn_on:
          <<: *kexp_yellow
  - id: wifi_state_script
    mode: single # only run one instance, ignore other starts while delayed
    then:
      - if:
          condition:
            wifi.connected
          then:
            - if:
                condition:
                  lambda: return id(play_requested);
                then:
                  - light.turn_on:
                      <<: *play_green
                  - if:
                      condition:
                        media_player.is_idle
                      then:
                        - script.execute: start_playing
                else:
                  - light.turn_on:
                      <<: *kexp_yellow
          else:
            - light.turn_on:
                <<: *connecting_blue
      - delay: 5s # wait 5 seconds until retry

esp32:
  board: esp-wrover-kit
  framework:
    type: arduino

logger:
  # level: WARN
  # level: VERY_VERBOSE
  # logs:
  #   fastled: DEBUG
  #   i2c.arduino: DEBUG
ota:

i2c:
  sda: GPIO18
  scl: GPIO23

wifi:
  power_save_mode: none
  networks:
    !secret networks
  # fallback for captive portal (so a user could potentially fix changed AP credentials)
  ap:
    !secret fallback_config

captive_portal:

improv_serial:

mqtt:
  <<: !secret mqtt_config
  reboot_timeout: 0s
  setup_priority: -150
  discovery_retain: false

external_components:
  - source: github://pr#3552 # DAC support https://github.com/esphome/esphome/pull/3552
    components: [es8388]
    refresh: 0s
  - source: github://pr#5515
    components: [i2s_audio]
    refresh: 0s
  - source:
      type: local
      path: "./components"
    components: [mqtt]

es8388:

i2s_audio:
  - i2s_lrclk_pin: GPIO25
    i2s_bclk_pin: GPIO5

media_player:
  - platform: i2s_audio
    name: None
    id: luxe_out
    dac_type: external
    i2s_dout_pin: GPIO26
    mode: stereo
    tone:
      lo: 6
      mid: 2
    on_play:
      - logger.log: "Playing!"
    on_pause:
      - logger.log: "Pausing!"
    on_idle:
      - logger.log: "Stopping!"
    on_state:
      if:
        condition:
          media_player.is_playing:
        then:
          - output.turn_off: mute_amp
        else:
          - output.turn_on: mute_amp

text_sensor:
  - id: stream_url_sensor
    platform: template
    name: Stream URL
    lambda:
      if (id(stream_url) != id(stream_url_sensor).state)
        return id(stream_url);
      else
        return {};
    on_value:
      - lambda: |-
          id(stream_url) = id(stream_url_sensor).state.c_str(); // c_str to force a copy
      - if:
          condition:
            media_player.is_playing
          then:
            - script.execute: start_playing

sensor:
  - platform: adc
    pin: GPIO33
    name: Battery
    icon: "mdi:battery-outline"
    device_class: voltage
    state_class: measurement
    entity_category: diagnostic
    unit_of_measurement: V
    update_interval: 15s
    accuracy_decimals: 3
    attenuation: 11db
    raw: true
    filters:
      - multiply: 0.00173913 # 2300 -> 4, for attenuation 11db, based on Olivier's code
      - exponential_moving_average:
          alpha: 0.2
          send_every: 2
      - delta: 0.002
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 15s
    on_value:
      - script.execute: wifi_state_script

binary_sensor:
  - platform: gpio
    internal: true
    pin:
      number: GPIO19
      inverted: true
      mode:
        input: true
        pullup: true
    name: Volume Up
    on_click:
      - media_player.volume_set: !lambda |-
          if (id(volume_setting) < .9f)
            id(volume_setting) += 0.1f;
          else
            id(volume_setting) = 1.0f;
          return id(volume_setting);
  - platform: gpio
    internal: true
    pin:
      number: GPIO32
      inverted: true
      mode:
        input: true
        pullup: true
    name: Volume Down
    on_click:
      - media_player.volume_set: !lambda |-
          if (id(volume_setting) > 0.2f)
            id(volume_setting) -= 0.1f;
          else
            id(volume_setting) = 0.1f;
          return id(volume_setting);
  - platform: gpio
    internal: true
    pin:
      number: GPIO12
      inverted: true
      mode:
        input: true
        pullup: true
    name: Play/Pause
    on_click:
      - lambda: id(play_requested) = !id(play_requested);
  - platform: template
    device_class: running
    id: play_requested_sensor
    name: Is Playing
    lambda: return id(play_requested);
    on_state:
      - if:
          condition: 
            lambda: return id(play_requested);
          then:
            - lambda: id(volume_setting) = 0.3;
            - script.execute: start_playing
          else:
            - script.execute: stop_playing
    # publish_initial_state: true # turns out this crashes when MQTT is enabled but not started
                                  # until late

light:
  - platform: fastled_clockless
    internal: true
    name: None
    id: top_led
    pin: GPIO22
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    gamma_correct: 2.8
    effects:
      - pulse:
    default_transition_length: 0s

output:
  - platform: gpio
    pin:
      number: 21
      mode: OUTPUT
    id: mute_amp
    inverted: true

psram:
  mode: quad
  speed: 40MHz

# these are disabled - it will be an unmanaged install
# api:
# dashboard_import:
#   package_import_url: github://esphome/firmware/media-player/raspiaudio-muse-luxe.yaml@main
